{"version":3,"sources":["store/types.ts","store/index.ts","components/AddItem.tsx","components/ToDoItem/index.tsx","Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ADD_ITEM","UPDATE_ITEM","localStorage","list","JSON","stringify","defaultState","parse","store","createStore","state","action","type","payload","id","isFinish","index","findIndex","item","Search","AddItem","useState","value","setValue","dispatch","useDispatch","allowClear","placeholder","enterButton","size","onChange","e","target","onSearch","Date","now","Text","TodoItem","todoItem","defaultChecked","checked","delete","disabled","Main","useSelector","title","headStyle","textAlign","footer","bordered","dataSource","renderItem","Item","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1c85bde7.chunk.js","sourcesContent":["export interface ToDoItem {\n  id:number,\n  item: string,\n  isFinish: boolean\n}\n\nexport interface ToDoItemState {\n  list: ToDoItem[]\n}\n// action type\nexport const ADD_ITEM = 'ADD_ITEM'\nexport const UPDATE_ITEM = 'UPDATE_ITEM'\n\nexport interface AddItemAction {\n  type: typeof ADD_ITEM,\n  payload: ToDoItem\n}\nexport interface UpdateItemAction {\n  type: typeof UPDATE_ITEM,\n  payload: ToDoItem\n}\n\nexport type ActionTypes = AddItemAction | UpdateItemAction;","// store.js\nimport { createStore } from 'redux';\nimport { ToDoItem, ToDoItemState, ADD_ITEM, UPDATE_ITEM, AddItemAction, UpdateItemAction, ActionTypes } from './types'\n\n// Action Creators\nexport function addItem(item: ToDoItem): AddItemAction {\n  return { type: ADD_ITEM, payload: item };\n}\nexport function updateItem(item: ToDoItem): UpdateItemAction {\n  return { type: UPDATE_ITEM, payload: item };\n}\n\n\nif (!localStorage.list) {\n  localStorage.list = JSON.stringify([])\n}\n\nconst list = JSON.parse(localStorage.list)\n// reducer\nconst defaultState: ToDoItemState = {\n  list: list\n}\n\nconst reducer = (state = defaultState, action: ActionTypes): ToDoItemState => {\n  switch (action.type) {\n    case ADD_ITEM:\n      {\n        const list = [...state.list, action.payload]\n        localStorage.list = JSON.stringify(list)\n        return {\n          list,\n        };\n      }\n    case UPDATE_ITEM:\n      {\n        const list = [...state.list]\n        const { id, isFinish } = action.payload\n        const index = list.findIndex(item => item.id === id)\n        list[index].isFinish = isFinish\n        localStorage.list = JSON.stringify(list)\n        return {\n          list,\n        };\n      }\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(reducer);\n\nexport default store;\n","import React, { useState } from 'react';\nimport { Input, Icon } from 'antd';\nimport { useDispatch } from 'react-redux';\nimport { addItem } from '../store/index'\nconst { Search } = Input;\n\nconst AddItem: React.FC = () => {\n  const [value, setValue] = useState('')\n  const dispatch = useDispatch()\n\n  const change = (e: any) => {\n    setValue(e.target.value)\n  }\n\n  const search = (value: string) => {\n    dispatch(addItem({ id: Date.now(), item: value, isFinish: false }));\n    setValue('')\n  }\n\n  return (\n    <Search\n      allowClear\n      value={value}\n      placeholder=\"input text\"\n      enterButton={<Icon type=\"plus\" />}\n      size=\"large\"\n      onChange={change}\n      onSearch={search}\n    />\n  )\n}\nexport default AddItem;\n","import React from 'react';\nimport { ToDoItem } from '../../store/types'\nimport { Checkbox, Typography } from 'antd';\nimport { useDispatch } from 'react-redux';\nimport { updateItem } from '../../store/index'\nconst { Text } = Typography;\n\ninterface Props {\n  todoItem: ToDoItem;\n}\n\nconst TodoItem = ({ todoItem }: Props) => {\n\n  const dispatch = useDispatch()\n\n  const onChange = (e: any) => {\n    dispatch(updateItem({ ...todoItem, isFinish: e.target.checked }))\n  }\n\n  return (\n    <>\n      <Checkbox defaultChecked={todoItem.isFinish} onChange={onChange}>\n        <Text delete={todoItem.isFinish} disabled={todoItem.isFinish}>{todoItem.item}</Text>\n      </Checkbox>\n    </>\n  )\n}\nexport default TodoItem;\n","import React from 'react';\nimport { Card, List } from 'antd';\nimport AddItem from './components/AddItem'\nimport { useSelector } from 'react-redux';\nimport { ToDoItemState } from './store/types'\nimport TodoItem from './components/ToDoItem'\n\nconst Main: React.FC = () => {\n  const list = useSelector((state: ToDoItemState) => state.list)\n  return (\n    <Card title=\"专注助手\" headStyle={{ textAlign: \"center\" }} id=\"app\">\n      <AddItem />\n      <List\n        footer={<div>Footer</div>}\n        bordered\n        dataSource={list}\n        renderItem={item => (\n          <List.Item>\n            <TodoItem todoItem={item} />\n          </List.Item>\n        )}\n      />\n    </Card>\n  )\n}\nexport default Main;\n","import React from 'react';\nimport './App.css';\nimport { Provider } from 'react-redux';\nimport store from './store'\nimport Main from './Main'\n\nconst App: React.FC = () => (\n  <Provider store={store} >\n    <Main />\n  </Provider>\n);\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}